<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="CSA SIMRAN MACHINE 2.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="Addr" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field6e119ae2">
	</Field>
	<Field name="Unused" type="ignored" numBits="12" relativity="absolute" signed="true" defaultValue="0" id="model.Field13234c10">
	</Field>
	<Field name="Opcode" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field3ee8ba8e">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register2349e85d" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register20f74753" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register42ef47b0" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register199bf5ba" />
	<Register name="FGI" width="1" initialValue="0" readOnly="false" id="model.module.Register75fcedd4" />
	<Register name="FGO" width="1" initialValue="0" readOnly="false" id="model.module.Register6fabe1e7" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register5741f965" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register1131e012" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register3b13dad" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register332540e5" />
	<Register name="Status" width="3" initialValue="0" readOnly="false" id="model.module.Register6bf71d35" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="HaltBit" bit="2" register="model.module.Register6bf71d35" halt="true" id="model.module.ConditionBit75585129" />

	<!--............. rams ..........................-->
	<RAM name="RAM" length="4096" cellSize="16" id="model.module.RAM7f8e467a" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="model.module.Register2349e85d" start="15" numBits="1" value="0" id="model.microinstruction.CpusimSet79dcd6ee" />
	<Set name="AC&lt;-1s" register="model.module.Register2349e85d" start="0" numBits="16" value="1" id="model.microinstruction.CpusimSet2f953594" />
	<Set name="S&lt;-0" register="model.module.Register332540e5" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet61a1008a" />

	<!--............. test ..........................-->
	<Test name="if(AC!=0)skip-1" register="model.module.Register2349e85d" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test7123cd4c" />
	<Test name="if(AC(15)=0)" register="model.module.Register2349e85d" start="15" numBits="1" comparison="EQ" value="0" omission="0" id="model.microinstruction.Test186f36b2" />
	<Test name="if(AC=0)" register="model.module.Register2349e85d" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test3555c5a3" />
	<Test name="if(AC&gt;=0)skip-1" register="model.module.Register2349e85d" start="0" numBits="16" comparison="GE" value="0" omission="1" id="model.microinstruction.Test21a0adb8" />
	<Test name="if(DR==0)skip-1" register="model.module.Register42ef47b0" start="0" numBits="12" comparison="NE" value="0" omission="0" id="model.microinstruction.Test4e864d6d" />
	<Test name="if(E=0)" register="model.module.Register199bf5ba" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test2fbd38a9" />

	<!--............. increment .....................-->
	<Increment name="AC*-&gt;AC+1" register="model.module.Register2349e85d" overflowBit="model.module.ConditionBit75585129" delta="1" id="model.microinstruction.Increment34de8820" />
	<Increment name="AR-&gt;AR+1" register="model.module.Register20f74753" delta="1" id="model.microinstruction.Increment10373e6e" />
	<Increment name="DR+1-&gt;DR" register="model.module.Register42ef47b0" delta="1" id="model.microinstruction.Increment6ca6e420" />
	<Increment name="IncTo-&gt;PC" register="model.module.Register3b13dad" overflowBit="model.module.ConditionBit75585129" delta="1" id="model.microinstruction.Increment2a98f16d" />

	<!--............. shift .........................-->
	<Shift name="AC&lt;-shlAC" type="cyclic" source="model.module.Register2349e85d" destination="model.module.Register2349e85d" direction="left" distance="1" id="model.microinstruction.Shift18f61f4f" />
	<Shift name="AC&lt;-shrAC" type="cyclic" source="model.module.Register2349e85d" destination="model.module.Register2349e85d" direction="right" distance="1" id="model.microinstruction.Shift758896a5" />

	<!--............. logical .......................-->
	<Logical name="AND" type="AND" source1="model.module.Register2349e85d" source2="model.module.Register42ef47b0" destination="model.module.Register2349e85d" id="model.microinstruction.Logical183f6080" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC*DR-&gt;AC" type="MULTIPLY" source1="model.module.Register2349e85d" source2="model.module.Register42ef47b0" destination="model.module.Register2349e85d" overflowBit="model.module.ConditionBit75585129" id="model.microinstruction.Arithmetic2933f09c" />
	<Arithmetic name="AC+DR-&gt;AC" type="ADD" source1="model.module.Register2349e85d" source2="model.module.Register42ef47b0" destination="model.module.Register2349e85d" overflowBit="model.module.ConditionBit75585129" id="model.microinstruction.Arithmetic39236d73" />
	<Arithmetic name="AC-DR-&gt;AC" type="SUBTRACT" source1="model.module.Register2349e85d" source2="model.module.Register42ef47b0" destination="model.module.Register2349e85d" overflowBit="model.module.ConditionBit75585129" id="model.microinstruction.Arithmetic513d4939" />
	<Arithmetic name="AC/DR-&gt;AC" type="DIVIDE" source1="model.module.Register2349e85d" source2="model.module.Register42ef47b0" destination="model.module.Register2349e85d" overflowBit="model.module.ConditionBit75585129" id="model.microinstruction.Arithmetic326508fe" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC(0)-&gt;E" source="model.module.Register2349e85d" srcStartBit="0" dest="model.module.Register199bf5ba" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1dc1f54d" />
	<TransferRtoR name="AC(15)-&gt;E" source="model.module.Register2349e85d" srcStartBit="15" dest="model.module.Register199bf5ba" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR7793cf3" />
	<TransferRtoR name="AC-&gt;DR" source="model.module.Register2349e85d" srcStartBit="0" dest="model.module.Register42ef47b0" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR26f5586b" />
	<TransferRtoR name="AR-&gt;DR" source="model.module.Register20f74753" srcStartBit="0" dest="model.module.Register42ef47b0" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR700c57a5" />
	<TransferRtoR name="AR-&gt;PC" source="model.module.Register20f74753" srcStartBit="0" dest="model.module.Register3b13dad" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR62f5af74" />
	<TransferRtoR name="DR-&gt;AC" source="model.module.Register42ef47b0" srcStartBit="0" dest="model.module.Register2349e85d" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR2ca5897d" />
	<TransferRtoR name="DR-&gt;IR" source="model.module.Register42ef47b0" srcStartBit="0" dest="model.module.Register1131e012" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR209fba82" />
	<TransferRtoR name="DR-&gt;PC" source="model.module.Register42ef47b0" srcStartBit="0" dest="model.module.Register3b13dad" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR323c704b" />
	<TransferRtoR name="E-&gt;AC(0)" source="model.module.Register199bf5ba" srcStartBit="0" dest="model.module.Register2349e85d" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR7dfdf777" />
	<TransferRtoR name="E-&gt;AC(15)" source="model.module.Register199bf5ba" srcStartBit="0" dest="model.module.Register2349e85d" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR7d1377d4" />
	<TransferRtoR name="IR(4-15)-&gt;AR" source="model.module.Register1131e012" srcStartBit="4" dest="model.module.Register20f74753" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR2085995e" />
	<TransferRtoR name="IR(4-15)-&gt;PC" source="model.module.Register1131e012" srcStartBit="4" dest="model.module.Register3b13dad" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR71ea1b2d" />
	<TransferRtoR name="PC-&gt;AR" source="model.module.Register3b13dad" srcStartBit="0" dest="model.module.Register20f74753" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR633e1c28" />
	<TransferRtoR name="PC-&gt;DR" source="model.module.Register3b13dad" srcStartBit="0" dest="model.module.Register42ef47b0" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR5757a4c" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="Decode-IR" ir="model.module.Register1131e012" id="model.microinstruction.Decode3b689bdd" />

	<!--............. set condition bit .............-->
	<SetCondBit name="Set-HaltBit" bit="model.module.ConditionBit75585129" value="1" id="model.microinstruction.SetCondBit156131e6" />

	<!--............. io ............................-->
	<IO name="Input-int-&gt;AC" direction="input" type="integer" buffer="model.module.Register2349e85d" connection="[Console]" id="model.microinstruction.IO59026f95" />
	<IO name="Output-AC-&gt;int" direction="output" type="integer" buffer="model.module.Register2349e85d" connection="[Console]" id="model.microinstruction.IO45f08b52" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR-&gt;RAM[AR]" direction="write" memory="model.module.RAM7f8e467a" data="model.module.Register42ef47b0" address="model.module.Register20f74753" id="model.microinstruction.MemoryAccess3f3bfd48" />
	<MemoryAccess name="RAM[AR]-&gt;DR" direction="read" memory="model.module.RAM7f8e467a" data="model.module.Register42ef47b0" address="model.module.Register20f74753" id="model.microinstruction.MemoryAccess447c6873" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.Ende48c9ae" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR633e1c28" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess447c6873" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR209fba82" />
		<Microinstruction microRef="model.microinstruction.Increment2a98f16d" />
		<Microinstruction microRef="model.microinstruction.Decode3b689bdd" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="SZE" opcode="8" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#eaf8af #f4a781" assemblyColors="#eaf8af" >
		<Microinstruction microRef="model.microinstruction.Test2fbd38a9" />
		<Microinstruction microRef="model.microinstruction.Increment2a98f16d" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="2" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#d5a1a3 #829d82" assemblyColors="#d5a1a3" >
		<Microinstruction microRef="model.microinstruction.Test3555c5a3" />
		<Microinstruction microRef="model.microinstruction.Increment2a98f16d" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="7" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#81ec99 #94f79d" assemblyColors="#81ec99" >
		<Microinstruction microRef="model.microinstruction.Test186f36b2" />
		<Microinstruction microRef="model.microinstruction.Increment2a98f16d" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="6" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#effca3 #a2f9d7" assemblyColors="#effca3" >
		<Microinstruction microRef="model.microinstruction.Shift18f61f4f" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7dfdf777" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7793cf3" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="5" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#9d8085 #83bdeb" assemblyColors="#9d8085" >
		<Microinstruction microRef="model.microinstruction.Shift758896a5" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7d1377d4" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1dc1f54d" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="1" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#e4d0aa #e186cb" assemblyColors="#e4d0aa" >
		<Microinstruction microRef="model.microinstruction.CpusimSet61a1008a" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="f" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#c8fe96 #84b583" assemblyColors="#c8fe96" >
		<Microinstruction microRef="model.microinstruction.Increment34de8820" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="e" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#cbe2ce #c9cdcd" assemblyColors="#cbe2ce #c9cdcd" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR2085995e" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess447c6873" />
		<Microinstruction microRef="model.microinstruction.Increment6ca6e420" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess3f3bfd48" />
		<Microinstruction microRef="model.microinstruction.Test4e864d6d" />
		<Microinstruction microRef="model.microinstruction.Increment2a98f16d" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="BSA" opcode="d" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#bceec5 #9cd490" assemblyColors="#bceec5 #9cd490" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR2085995e" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5757a4c" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess3f3bfd48" />
		<Microinstruction microRef="model.microinstruction.Increment10373e6e" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR62f5af74" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="c" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#b09cfc #f1f29c" assemblyColors="#b09cfc #f1f29c" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR2085995e" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR700c57a5" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR323c704b" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="b" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#c5efce #f4f1ab" assemblyColors="#c5efce #f4f1ab" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR2085995e" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR26f5586b" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess3f3bfd48" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="a" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#e8fc82 #cafe9f" assemblyColors="#e8fc82 #cafe9f" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR2085995e" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess447c6873" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR2ca5897d" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="9" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#92dcd4 #88fad5" assemblyColors="#92dcd4 #88fad5" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR2085995e" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess447c6873" />
		<Microinstruction microRef="model.microinstruction.Logical183f6080" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="write" opcode="4" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#d68084 #8dc6f3" assemblyColors="#d68084" >
		<Microinstruction microRef="model.microinstruction.IO45f08b52" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="read" opcode="3" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#b2a6f0 #c9a9e2" assemblyColors="#b2a6f0" >
		<Microinstruction microRef="model.microinstruction.IO59026f95" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<MachineInstruction name="stop" opcode="0" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#eafc9d #8a94ed" assemblyColors="#eafc9d" >
		<Microinstruction microRef="model.microinstruction.SetCondBit156131e6" />
		<Microinstruction microRef="model.microinstruction.Ende48c9ae" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
		<RegisterRAMPair register="model.module.Register3b13dad" ram="model.module.RAM7f8e467a" dynamic="false" />
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM7f8e467a" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

	<!--............. program counter info ..................-->

</Machine>
