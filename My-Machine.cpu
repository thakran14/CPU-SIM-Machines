<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="My-Machine.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="Addr" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="Field3bd5ac">
	</Field>
	<Field name="Unused" type="ignored" numBits="12" relativity="absolute" signed="true" defaultValue="0" id="Field1c61407">
	</Field>
	<Field name="Opcode" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="Field151a24c">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="module.Register1f9570b" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="module.Register168f087" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="module.Register1277a0b" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="module.Register107c16" />
	<Register name="FGI" width="1" initialValue="0" readOnly="false" id="module.Register50a42f" />
	<Register name="FGO" width="1" initialValue="0" readOnly="false" id="module.Register1c5da81" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="module.Registeree6cf8" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="module.Register2ca896" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="module.Register16cedd7" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="module.Register722b1c" />
	<Register name="Status" width="3" initialValue="0" readOnly="false" id="module.Register194c2f5" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="HaltBit" bit="2" register="module.Register194c2f5" halt="true" id="module.ConditionBit1d11e2e" />

	<!--............. rams ..........................-->
	<RAM name="RAM" length="4096" cellSize="16" id="module.RAM86711a" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="module.Register1f9570b" start="15" numBits="1" value="0" id="microinstruction.CpusimSetb83ec8" />
	<Set name="AC&lt;-1s" register="module.Register1f9570b" start="0" numBits="16" value="1" id="microinstruction.CpusimSet1d2c880" />

	<!--............. test ..........................-->
	<Test name="if(AC!=0)skip-1" register="module.Register1f9570b" start="0" numBits="16" comparison="NE" value="0" omission="1" id="microinstruction.Test87843a" />
	<Test name="if(AC&gt;=0)skip-1" register="module.Register1f9570b" start="0" numBits="16" comparison="GE" value="0" omission="1" id="microinstruction.Test17827d1" />

	<!--............. increment .....................-->
	<Increment name="AC*-&gt;AC+1" register="module.Register1f9570b" overflowBit="module.ConditionBit1d11e2e" delta="1" id="microinstruction.Increment90508" />
	<Increment name="IncTo-&gt;PC" register="module.Register16cedd7" overflowBit="module.ConditionBit1d11e2e" delta="1" id="microinstruction.Increment11e4ec1" />

	<!--............. shift .........................-->
	<Shift name="AC&lt;-shlAC" type="cyclic" source="module.Register1f9570b" destination="module.Register1f9570b" direction="left" distance="1" id="microinstruction.Shift1e6b90c" />
	<Shift name="AC&lt;-shrAC" type="cyclic" source="module.Register1f9570b" destination="module.Register1f9570b" direction="right" distance="1" id="microinstruction.Shift1f25e0e" />

	<!--............. logical .......................-->
	<!-- none -->

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC*DR-&gt;AC" type="MULTIPLY" source1="module.Register1f9570b" source2="module.Register1277a0b" destination="module.Register1f9570b" overflowBit="module.ConditionBit1d11e2e" id="microinstruction.Arithmetic1373e7d" />
	<Arithmetic name="AC+DR-&gt;AC" type="ADD" source1="module.Register1f9570b" source2="module.Register1277a0b" destination="module.Register1f9570b" overflowBit="module.ConditionBit1d11e2e" id="microinstruction.Arithmetic80085c" />
	<Arithmetic name="AC-DR-&gt;AC" type="SUBTRACT" source1="module.Register1f9570b" source2="module.Register1277a0b" destination="module.Register1f9570b" overflowBit="module.ConditionBit1d11e2e" id="microinstruction.Arithmetice8fcd9" />
	<Arithmetic name="AC/DR-&gt;AC" type="DIVIDE" source1="module.Register1f9570b" source2="module.Register1277a0b" destination="module.Register1f9570b" overflowBit="module.ConditionBit1d11e2e" id="microinstruction.Arithmetic159db64" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC-&gt;DR" source="module.Register1f9570b" srcStartBit="0" dest="module.Register1277a0b" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR1e1d424" />
	<TransferRtoR name="AR-&gt;PC" source="module.Register168f087" srcStartBit="0" dest="module.Register16cedd7" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR139ecec" />
	<TransferRtoR name="DR-&gt;AC" source="module.Register1277a0b" srcStartBit="0" dest="module.Register1f9570b" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR2cc726" />
	<TransferRtoR name="DR-&gt;IR" source="module.Register1277a0b" srcStartBit="0" dest="module.Register2ca896" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR18facfc" />
	<TransferRtoR name="IR(4-15)-&gt;AR" source="module.Register2ca896" srcStartBit="4" dest="module.Register168f087" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR520e5d" />
	<TransferRtoR name="IR(4-15)-&gt;PC" source="module.Register2ca896" srcStartBit="4" dest="module.Register16cedd7" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR4ad9f7" />
	<TransferRtoR name="PC-&gt;AR" source="module.Register16cedd7" srcStartBit="0" dest="module.Register168f087" destStartBit="0" numBits="12" id="microinstruction.TransferRtoRab362f" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="Decode-IR" ir="module.Register2ca896" id="microinstruction.Decode8d810a" />

	<!--............. set condition bit .............-->
	<SetCondBit name="Set-HaltBit" bit="module.ConditionBit1d11e2e" value="1" id="microinstruction.SetCondBit134de0" />

	<!--............. io ............................-->
	<IO name="Input-int-&gt;AC" direction="input" type="integer" buffer="module.Register1f9570b" connection="[Console]" id="microinstruction.IOa8b4f4" />
	<IO name="Output-AC-&gt;int" direction="output" type="integer" buffer="module.Register1f9570b" connection="[Console]" id="microinstruction.IO177fac0" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR-&gt;RAM[AR]" direction="write" memory="module.RAM86711a" data="module.Register1277a0b" address="module.Register168f087" id="microinstruction.MemoryAccess1ccacf5" />
	<MemoryAccess name="RAM[AR]-&gt;DR" direction="read" memory="module.RAM86711a" data="module.Register1277a0b" address="module.Register168f087" id="microinstruction.MemoryAccess1c69861" />

	<!--............. end ...........................-->
	<End id="microinstruction.End5e8879" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="microinstruction.TransferRtoRab362f" />
		<Microinstruction microRef="microinstruction.MemoryAccess1c69861" />
		<Microinstruction microRef="microinstruction.TransferRtoR18facfc" />
		<Microinstruction microRef="microinstruction.Increment11e4ec1" />
		<Microinstruction microRef="microinstruction.Decode8d810a" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="CLA" opcode="c" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#b4e1d0 #c4dfba" assemblyColors="#b4e1d0" >
		<Microinstruction microRef="microinstruction.TransferRtoR1e1d424" />
		<Microinstruction microRef="microinstruction.Arithmetice8fcd9" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="jmpn" opcode="b" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#83c383 #81d8b7" assemblyColors="#83c383 #81d8b7" >
		<Microinstruction microRef="microinstruction.Test17827d1" />
		<Microinstruction microRef="microinstruction.TransferRtoR4ad9f7" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="jmpz" opcode="a" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#99d8d4 #9f8ccd" assemblyColors="#99d8d4 #9f8ccd" >
		<Microinstruction microRef="microinstruction.Test87843a" />
		<Microinstruction microRef="microinstruction.TransferRtoR4ad9f7" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="jump" opcode="9" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#e1c3c9 #ae9c92" assemblyColors="#e1c3c9 #ae9c92" >
		<Microinstruction microRef="microinstruction.TransferRtoR4ad9f7" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="divide" opcode="8" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#80bdf5 #e8a9c0" assemblyColors="#80bdf5 #e8a9c0" >
		<Microinstruction microRef="microinstruction.TransferRtoR520e5d" />
		<Microinstruction microRef="microinstruction.MemoryAccess1c69861" />
		<Microinstruction microRef="microinstruction.Arithmetic159db64" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="multiply" opcode="7" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#bae6f6 #c9b0e8" assemblyColors="#bae6f6 #c9b0e8" >
		<Microinstruction microRef="microinstruction.TransferRtoR520e5d" />
		<Microinstruction microRef="microinstruction.MemoryAccess1c69861" />
		<Microinstruction microRef="microinstruction.Arithmetic1373e7d" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="subtract" opcode="6" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#91bdb2 #8abe95" assemblyColors="#91bdb2 #8abe95" >
		<Microinstruction microRef="microinstruction.TransferRtoR520e5d" />
		<Microinstruction microRef="microinstruction.MemoryAccess1c69861" />
		<Microinstruction microRef="microinstruction.Arithmetice8fcd9" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="add" opcode="5" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#a0cc9b #a2cfee" assemblyColors="#a0cc9b #a2cfee" >
		<Microinstruction microRef="microinstruction.TransferRtoR520e5d" />
		<Microinstruction microRef="microinstruction.MemoryAccess1c69861" />
		<Microinstruction microRef="microinstruction.Arithmetic80085c" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="write" opcode="4" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#d68084 #8dc6f3" assemblyColors="#d68084" >
		<Microinstruction microRef="microinstruction.IO177fac0" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="read" opcode="3" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#b2a6f0 #c9a9e2" assemblyColors="#b2a6f0" >
		<Microinstruction microRef="microinstruction.IOa8b4f4" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="store" opcode="2" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#ead8cb #d1a2d7" assemblyColors="#ead8cb #d1a2d7" >
		<Microinstruction microRef="microinstruction.TransferRtoR520e5d" />
		<Microinstruction microRef="microinstruction.TransferRtoR1e1d424" />
		<Microinstruction microRef="microinstruction.MemoryAccess1ccacf5" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="load" opcode="1" instructionFormat="Opcode Addr" assemblyFormat="Opcode Addr" instructionColors="#ddf0b8 #f6d5ea" assemblyColors="#ddf0b8 #f6d5ea" >
		<Microinstruction microRef="microinstruction.TransferRtoR520e5d" />
		<Microinstruction microRef="microinstruction.MemoryAccess1c69861" />
		<Microinstruction microRef="microinstruction.TransferRtoR2cc726" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<MachineInstruction name="stop" opcode="0" instructionFormat="Opcode Unused" assemblyFormat="Opcode" instructionColors="#eafc9d #8a94ed" assemblyColors="#eafc9d" >
		<Microinstruction microRef="microinstruction.SetCondBit134de0" />
		<Microinstruction microRef="microinstruction.End5e8879" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
		<RegisterRAMPair register="module.Register16cedd7" ram="module.RAM86711a" dynamic="false" />
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="module.RAM86711a" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

</Machine>
